!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("three")):"function"==typeof define&&define.amd?define(["three"],t):"object"==typeof exports?exports.tacoxdna=t(require("three")):e.tacoxdna=t(e.THREE)}(self,(function(e){return(()=>{"use strict";var t={807:t=>{t.exports=e}},n={};function s(e){var o=n[e];if(void 0!==o)return o.exports;var i=n[e]={exports:{}};return t[e](i,i.exports,s),i.exports}s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{s.r(o),s.d(o,{Logger:()=>a,convertFromTo:()=>R,convertFromTo_async:()=>z});var e=s(807);const t={0:"A",1:"G",2:"C",3:"T"},n={A:0,a:0,G:1,g:1,C:2,c:2,T:3,t:3,U:3,u:3,D:4};let i;try{i=Number.EPSILON}catch(e){i=2220446049250313e-31}const r=.4+.2,l=.3897628551303122;class a{static log(e,t=a.INFO,n){void 0===t&&(t=a.INFO),t<a.debug_level||(null!=n&&a.debug_level===a.DEBUG?a.logFunction(`${a.messages[t]}: ${e} (additional info: '${n}')`):a.logFunction(`${a.messages[t]}: ${e}`))}static die(e){throw a.log(e,a.CRITICAL),e}}a.DEBUG=0,a.INFO=1,a.WARNING=2,a.CRITICAL=3,a.debug_level=a.INFO,a.messages=["DEBUG","INFO","WARNING","CRITICAL"],a.logFunction=console.log;class c{constructor(t,s,o,i,r=new e.Vector3(0,0,0),l=new e.Vector3(0,0,0),d=-1,h,u,_){if(this.index=c.index,c.index++,this.cm_pos=t.clone(),this._a1=s.clone().normalize(),this._a3=o.clone().normalize(),"string"==typeof i)try{i=n[i]}catch(e){a.log(`Invalid base (${e})`)}this._base=i,this._L=l,this._v=r,this.n3=d,this.next=-1,this.pair=h,this.cluster=u,this.color=_}get pos_base(){return this.cm_pos.clone().add(this._a1.clone().multiplyScalar(.4))}get pos_stack(){return this.cm_pos.clone().add(this._a1.clone().multiplyScalar(.34))}get pos_back(){return this.cm_pos.clone().add(this._a1.clone().multiplyScalar(-.4))}get pos_back_rel(){return this.pos_back.clone().sub(this.cm_pos)}get a2(){return this._a3.clone().cross(this._a1)}copy(e,t){let n=new c(this.cm_pos.clone(),this._a1.clone(),this._a3.clone(),this._base,this._L,this._v,this.n3,this.pair,this.cluster,this.color);return void 0!==e&&n.translate(e),void 0!==t&&n.rotate(t),n}translate(e){this.cm_pos.add(e),this.cm_pos_box.add(e)}rotate(e,t){void 0===t&&(t=this.cm_pos.clone()),this.cm_pos.sub(t).applyMatrix3(e).add(t),this._a1.applyMatrix3(e),this._a3.applyMatrix3(e)}distance(e,t=!0,n){t&&void 0===n&&a.die("distance between nucleotides: if PBC is true, box must be provided");let s=e.pos_back.clone().sub(this.pos_back);return t&&s.sub(n.clone().multiply(s.clone().divide(n).round())),s}get_base(){return[0,1,2,3].includes(this._base)?t[this._base]:this._base.toString()}_get_lorenzo_output(){return[this.cm_pos,this._a1,this._a3,this._v,this._L].map((e=>e.toArray().join(" "))).join(" ")}}c.index=0;class d{constructor(){this.index=d.index,d.index++,this._first=-1,this._last=-1,this._nucleotides=[],this._sequence=[],this._circular=!1}get N(){return this._nucleotides.length}get sequence(){return this._sequence}_prepare(e,t){this.index=e,this._first=t;let n=0;for(;n<this.N;)this._nucleotides[n].index=t+n,n++;return this._last=t+n,t+n+1}copy(){let e=new d;for(const t of this._nucleotides)e.add_nucleotide(t.copy());return e}get cm_pos(){let t=new e.Vector3;return this._nucleotides.forEach((e=>{t.add(e.cm_pos)})),t.divideScalar(this.N)}set cm_pos(e){const t=e.clone().sub(this.cm_pos);this._nucleotides.forEach((e=>e.translate(t)))}translate(e){let t=this.cm_pos.clone().add(e);this.cm_pos=t}rotate(e,t){void 0===t&&(t=this.cm_pos);for(const n of this._nucleotides)n.rotate(e,t)}append(e){let t=this._nucleotides.slice(-1)[0].distance(e._nucleotides[0],!1);Math.sqrt(t.dot(t))>1.0025&&a.log("WARNING: Strand.push(): strands seem too far apart. Assuming you know what you are doing.");let n=new d;for(const e of this._nucleotides)n.add_nucleotide(e);for(const t of e._nucleotides)n.add_nucleotide(t);return n}get_slice(e=0,t){if(void 0===t&&(t=this.N),t>this.N)throw`The given end parameter is larger than the number of nucleotides of the strand (${t} > ${this.N})`;let n=new d;for(let s=e;s<t;s++)n.add_nucleotide(this._nucleotides[s].copy());return n}set sequence(e){if("string"==typeof e&&(e=Array.from(e).map((e=>n[e]))),e.length==this._nucleotides.length){for(let t=0;t<this._nucleotides.length;t++)this._nucleotides[t]._base=e[t];this._sequence=e}else a.log("Cannot change sequence: lengths don't match",a.WARNING)}bring_in_box_nucleotides(e){let t=this.cm_pos.divide(e).round().multiply(e);for(const e of this._nucleotides)e.cm_pos_box=e.cm_pos.clone().sub(t)}add_nucleotide(e){0===this._nucleotides.length&&(this._first=e.index),e.strand=this.index,this._nucleotides.push(e),this._last=e.index,this._sequence.push(e._base)}_get_lorenzo_output(){let e=this._nucleotides.map((e=>e._get_lorenzo_output())).join("\n")+"\n",t="";for(const e of this._nucleotides){let n,s;this._circular?(n=e.index===this._first?this._last:e.index-1,s=e.index===this._last?this._first:e.index+1):(n=e.index===this._first?-1:e.index-1,s=e.index===this._last?-1:e.index+1),t+=`${this.index+1} ${e.get_base()} ${n} ${s}\n`}return[e,t]}get_lammps_N_of_bonds_strand(){let e=0;for(const t of this._nucleotides)(t.index!=this._last||this._circular)&&e++;return e}get_lammps_bonds(){let e=[];for(const t of this._nucleotides)t.index!=this._last?e.push(`${t.index+1}  ${t.index+2}`):this._circular&&e.push(`${t.index+1}  ${this._first+1}`);return e}make_circular(e=!1){if(e){let e=this._nucleotides.slice(-1)[0].distance(this._nucleotides[0],!1);Math.sqrt(e.dot(e))>1.0025&&a.log("Strand.make_circular(): ends of the strand seem too far apart. Assuming you know what you are doing.",a.WARNING)}this._circular=!0}make_noncircular(){this._circular=!1}is_circular(){return this._circular}cut_in_two(e=!0){let t=new d,n=new d,s=0;for(const o of this._nucleotides)s<this._nucleotides.length/2?t.add_nucleotide(e?o.copy():o):n.add_nucleotide(e?o.copy():o),s++;return[t,n]}}d.index=0;class h{constructor(e,t=0,n=0,s=0){this._time=t,this._ready=!1,this._box=e,this._N=0,this._N_strands=0,this._strands=[],this._nucleotide_to_strand=[],this.E_pot=n,this.E_kin=s,this.E_tot=n+s,c.index=0,d.index=0}get sequences(){return this._strands.map((e=>e._sequence))}get N(){return this._N}get N_strands(){return this._N_strands}_prepare(){let e=0;for(let t=0;t<this._N_strands;t++)e=this._strands[t]._prepare(t,e);for(const e of this._strands)e.bring_in_box_nucleotides(this._box)}copy(){let e=new h(this._box);for(const t of this._strands)e.add_strand(t.copy());return e}join(t,n){if(void 0===n){n=new e.Vector3(0,0,0);for(let e=0;e<3;e++)t._box[e]>this._box[e]?n[e]=t._box[e]:n[e]=this._box[e]}let s=new h(n);for(const e of this._strands)s.add_strand(e.copy());for(const e of t._strands)s.add_strand(e.copy());return s}add_strand(e){return this._strands.push(e),this._N+=e.N,this._N_strands++,!0}add_strands(e){if(Array.isArray(e)){let t=[];for(const n of e)this.add_strand(n)&&t.push(n);if(t.length===e.length)return!0;for(const e of t)c.index-=e.N,d.index--,this._strands.pop(),this._N-=e.N,this._N_strands--;return!1}return!!this.add_strand(e)}rotate(e,t){for(const n of this._strands)n.rotate(e,t)}translate(e){for(const t of this._strands)t.translate(e)}print_lorenzo_output(){let e=`t = ${this._time}\nb = ${this._box.x} ${this._box.y} ${this._box.z}\nE = ${this.E_tot} ${this.E_pot} ${this.E_kin}\n`,t=0,n=0;for(const e of this._strands)t++,n+=e.N;let s=`${n} ${t}\n`;for(const t of this._strands){let[n,o]=t._get_lorenzo_output();s+=o,e+=n}return[s,e]}print_oxview_output(){let e={box:this._box.toArray(),systems:[{id:0,strands:[]}]};for(const t of this._strands){let n={id:t.index,end3:t._nucleotides[0].index,end5:t._nucleotides.slice(-1)[0].index,class:"NucleicAcidStrand",monomers:[]};for(let e=0;e<t.N;e++){let s,o,i=t._nucleotides[e];t._circular?(o=0===e?t._nucleotides.slice(-1)[0].index:t._nucleotides[e-1].index,s=e===t._nucleotides.length-1?t._nucleotides[0].index:t._nucleotides[e+1].index):(o=0===e?-1:t._nucleotides[e-1].index,s=e===t._nucleotides.length-1?-1:t._nucleotides[e+1].index);let r={id:i.index,type:i.get_base(),class:"DNA",p:i.cm_pos.toArray(),a1:i._a1.toArray(),a3:i._a3.toArray()};o>=0&&(r.n3=o),s>=0&&(r.n5=s),void 0!==i.pair&&(r.bp=i.pair.index),void 0!==i.cluster&&(r.cluster=i.cluster),void 0!==i.color&&(r.color=i.color),n.monomers.push(r)}e.systems[0].strands.push(n)}return JSON.stringify(e)}get _nucleotides(){return[].concat(...this._strands.map((e=>e._nucleotides)))}map_nucleotides_to_strands(){for(let e=0;e<this._strands.length;e++)for(let t=0;t<this._strands[e].N;t++)this._nucleotide_to_strand.push(e)}print_dot_bracket_output(){let e="";for(let t=0;t<this.N;t++){let n=this._nucleotides[t].interactions;n.length>1&&a.log("more than 1 HB for a nucleotide",a.WARNING),0===n.length?e+=".":n[0]>t?e+="(":n[0]<t?e+=")":a.log("unexpected interaction detected while building nupack string",a.CRITICAL)}return e}}function u(e,t,n=1){void 0===t&&(t=e,e=0);var s=[];for(let o=0;o<n;o++)s[o]=e+Math.floor(Math.random()*(t-e));return 1===n?s[0]:s}function _(e,t){if(e===t)return!0;if(null===e||null===t)return!1;if(e.length!==t.length)return!1;for(var n=0;n<e.length;++n)if(e[n]!==t[n])return!1;return!0}function f(e,t,n){e=e.clone(),t=t.clone(),n=n.clone();const s=e.dot(e),o=t.dot(e);t.sub(e.clone().multiplyScalar(o/s));const i=n.dot(e),r=n.dot(t),l=t.dot(t);return n.sub(e.clone().multiplyScalar(i/s).add(t.clone().multiplyScalar(r/l))),e.divideScalar(s),t.divideScalar(l),n.divideScalar(Math.sqrt(n.dot(n))),[e,t,n]}function p(){let t,n,s=1;for(;s>=1;)t=1-2*Math.random(),n=1-2*Math.random(),s=t*t+n*n;const o=2*Math.sqrt(1-s);return new e.Vector3(t*o,n*o,1-2*s)}function g(){let[t,n,s]=f(p(),p(),p()),o=(new e.Matrix3).set(t.x,t.y,t.z,n.x,n.y,n.z,s.x,s.y,s.z);return o.determinant()<0&&(o=(new e.Matrix3).set(n.x,n.y,n.z,t.x,t.y,t.z,s.x,s.y,s.z)),o}class m{generate(t,s,o=new e.Vector3(0,0,0),i=new e.Vector3(0,0,1),h,u=0,_=!0,f=!1,p=0,g=10.34,m,b,y=!1){if("string"==typeof s)try{s=Array.from(s).map((e=>n[e]))}catch(e){a.die("Key Error: sequence is invalid")}let x=e=>Math.floor(Math.random()*e);if(void 0===s){s=new Array(t);for(let e=0;e<t;e++)s[e]=x(4)}else if(s.length!=t){let e=t-s.length;for(a.log(`sequence is too short, adding ${e} random bases`,a.WARNING);e--;)s.push(x(4))}f&&t<30&&a.log("sequence is too short! Proceed at your own risk",a.WARNING);let w=!0;f&&t<30&&!_&&(a.log("sequence is too short! Generating ssDNA without imposed helicity",a.WARNING),y||(w=!1)),void 0===m&&(m=0),void 0===b&&(b=t),m>b&&a.die("ds_end > ds_start"),b>t&&a.die("ds_end > bp");let v,M=Math.sqrt(i.dot(i));M<1e-10?(a.log("direction must be a valid vector, defaulting to (0, 0, 1)",a.WARNING),i=new e.Vector3(0,0,1)):i.divideScalar(M),h?v=h:(v=new e.Vector3(Math.random(),Math.random(),Math.random()),v.sub(i.clone().multiplyScalar(i.clone().dot(v))),v.normalize());let N,I,A,q=new d,V=v.clone().applyAxisAngle(i,u),k=o.clone(),$=i;if(f&&(N=v.clone().cross(i),I=2*Math.PI/t,A=.7525/Math.sqrt(2*(1-Math.cos(I)))),f&&w){for(let e=0;e<t;e++){let n=v.clone().multiplyScalar(l*Math.cos(e*I)).add(i.clone().multiplyScalar(l*Math.sin(e*I)));k.add(n),$=n.clone().normalize(),V=$.clone().cross(N),V.applyAxisAngle($,e*(Math.round(Math.floor(t/g))+p)/t*2*Math.PI),q.add_nucleotide(new c(k.clone().sub(V.clone().multiplyScalar(r)),V,$,s[e]))}q.make_circular(!0)}else if(f&&!w){for(let n=0;n<t;n++)k=new e.Vector3(Math.cos(n*I)*A+.34*Math.cos(n*I),Math.sin(n*I)*A+.34*Math.sin(n*I),0),V=new e.Vector3(Math.cos(n*I),Math.sin(n*I),0),q.add_nucleotide(new c(k,V,new e.Vector3(0,0,1),s[n]));q.make_circular(!0)}else for(let e=0;e<t;e++)q.add_nucleotide(new c(k.clone().sub(V.clone().multiplyScalar(r)),V,$,s[e])),e!=t-1&&(V.applyAxisAngle(i,35.9*Math.PI/180),k.add($.multiplyScalar(l)));if(_){let e=new d;for(let t=b-1;t<=m;t--){let n=q._nucleotides[t];V=n._a1.clone().negate(),$=n._a3.clone().negate();let o=V.clone().multiplyScalar(-1.2).add(n.cm_pos);e.add_nucleotide(new c(o,V,$,3-s[t]))}return 0===m&&b===t&&f&&e.make_circular(!0),[q,e]}return q}generate_or_sq(t,n,s=new e.Vector3(0,0,0),o=new e.Vector3(0,0,1),i,h=!0,_=0,f=Math.PI/180*33.75,p=[],g=[],m=[]){if(p&&g.length!=m.length&&(m.length+1===g.length?(a.log(`the lengths of begin ${g.length} and end ${m.length} arrays are mismatched; I will try to proceed by using the number of basepairs as the last element of the end array`,a.WARNING),m.push(t+1)):a.die(`the lengths of begin ${g.length} and end ${m.length} arrays are unrecoverably mismatched`)),void 0===n)n=u(0,4,t);else if(n.length!=t){let e=t-n.length;n+=u(0,4,e),a.log(`sequence is too short, adding ${e} random bases`,a.WARNING)}if(Array.isArray(f))f.length!=t-1&&a.log("generate_or_sq: incorrect angle array length, should be 1 less than number of base pairs",a.CRITICAL);else{let e=f;f=[];for(let n=0;n<t;n++)f.push(e)}let b=n.map((e=>3-e));b.reverse();let y,x=Math.sqrt(o.dot(o));x<1e-10?(a.log("direction must be a valid vector, defaulting to (0, 0, 1)",a.WARNING),o=new e.Vector3(0,0,1)):o.divideScalar(x),void 0===i?(y=new e.Vector3(Math.random(),Math.random(),Math.random()),y.sub(o.clone().multiplyScalar(o.clone().dot(y))),y.normalize()):y=i.clone();let w=new d,v=y.clone().applyAxisAngle(o,_),M=s.clone(),N=o.clone(),I=[];for(let s=0;s<t;s++)if(w.add_nucleotide(new c(M.clone().sub(v.clone().multiplyScalar(r)),v,N,n[s])),s!=t-1){let t=(new e.Quaternion).setFromAxisAngle(o,f[s]);if(I.push(t),v.applyQuaternion(t).normalize(),M.add(N.clone().normalize().multiplyScalar(l)),p)for(let e=0;e<p.length;e++)s>=g[e]&&s<m[e]&&p[e]&&M.add(N.clone().multiplyScalar(l*(-p[e]/(m[e]-g[e]))))}if(h){v.negate().normalize(),N=o.clone().negate().normalize();let e=new d;for(let n=0;n<t;n++){let s=w._nucleotides[t-n-1],o=new c(M.clone().sub(v.clone().multiplyScalar(r)),v.clone(),N.clone(),b[n],void 0,void 0,void 0,s);if(s.pair=o,e.add_nucleotide(o),n!=t-1&&(v.applyQuaternion(I.pop().conjugate()).normalize(),M.add(N.clone().multiplyScalar(l)),p))for(let e=0;e<p.length;e++)t-2-n>=g[e]&&t-2-n<m[e]&&p[e]&&M.add(N.clone().multiplyScalar(l*(-p[e]/(m[e]-g[e]))))}return[w,e]}return w}generate_double_offset(t,s,o,i=new e.Vector3(0,0,0),r=new e.Vector3(0,0,1),l,a=0){let c,d;c="string"==typeof t?[...t].map((e=>n[e])):t,d="string"==typeof s?[...s].map((e=>n[e])):s;let h=Math.max(c.length,d.length+o),u=this.generate(h,void 0,i,r,!1,void 0,!0),_=u[0],f=u[1];return _=_.get_slice(0,c.length),f=d.length+o>c.length?f.get_slice(0,d.length):f.get_slice(h-o-d.length,d.length),_.sequence=c,f.sequence=d,[_,f]}generate_rw(t,n=new e.Vector3(0,0,0)){a.log("Generating strand as a random walk. Remember to equilibrate the configuration with MC",a.WARNING);let s=new e.Vector3(.7525,0,0),o=n,i=[];i.push(o);for(let e=1;e<t.length;e++){let e,t=!0;for(;t;){t=!1;let n=g(),r=s.clone().applyMatrix3(n);e=o.clone().add(s.clone().applyMatrix3(n)),t=!1;for(const n of i)r=e.clone().sub(n),r.dot(r)<.4*.4&&(t=!0)}o=e,i.push(o)}let r=[];s=i[1].clone().sub(i[0]),r.push(s.clone().divideScalar(Math.sqrt(s.dot(s))));for(let e=1;e<i.length-1;e++)s=i[e+1].clone().add(i[e-1]).multiplyScalar(.5),s=i[e].clone().sub(s),r.push(s.clone().divideScalar(Math.sqrt(s.dot(s))));s=i[i.length-1].clone().sub(i[i.length-2]),r.push(s.divideScalar(Math.sqrt(s.dot(s))));let l=new d;for(let e=0;e<i.length;e++){let n=i[e],[s,o,a]=f(r[e],p(),p()),d=n+r[e]*Math.abs(-.4);l.add_nucleotide(new c(d,s,a,t[e]))}return l}}class b{constructor(){this.map=new Map}set(e,t){this.map.set(e.toString(),t)}get(e){return this.map.get(e.toString())}has(e){return this.map.has(e.toString())}get size(){return this.map.size}*keys(){for(let e of this.map.keys())yield e.split(",").map((e=>parseInt(e)))}*entries(){for(let[e,t]of this.map.entries()){let n=e.split(",").map((e=>parseInt(e)));yield[n,t]}}values(){return this.map.values()}}class y extends b{constructor(){super(),this._scaf=new b,this._stap=new b,this.nuc_count=0,this.strand_count=0}add_scaf(e,t,n,s){this._scaf.set([e,t],[n,s])}add_stap(e,t,n,s){this._stap.set([e,t],[n,s])}add_scaf_strand(e,t,n=!1){let s=0;const o=this._scaf.size;for(const[[n,o],[i,r]]of t._scaf.entries())i===e&&(this.add_scaf(n,o,this.strand_count,r.map((e=>e+this.nuc_count))),s+=r.length);return this.nuc_count+=s,this._scaf.size===o?1:(n||this.strand_count++,0)}add_stap_strand(e,t,n=!1){let s=0;const o=this._stap.size;for(const[[n,o],[i,r]]of t._stap.entries())i===e&&(this.add_stap(n,o,this.strand_count,r.map((e=>e+this.nuc_count))),s+=r.length);return this.nuc_count+=s,this._stap.size===o?1:(n||this.strand_count++,0)}add_strand(e,t,n=!1){return this.add_scaf_strand(e,t,n)&&this.add_stap_strand(e,t,n)}}const x=2.55,w=2.6;function v(...e){return e.reduce(((e,t)=>e+t),0)}function M(e,t){void 0===t&&(t=e,e=0);let n=[];for(let s=e;s<t;s++)n.push(s);return n}class N{constructor(){this.begin=[],this.end=[]}toString(){return`${this.begin} ${this.end}`}add_begin(e){this.begin.includes(e)||this.begin.push(e)}add_end(e){this.end.includes(e)||this.end.push(e)}}function I(e,t,n,s,o,i,r,l,c,d,h,u,_,f){let p,g,b=0,y=0;if((t.num%2+u)%2==0){for(const e of t.skip.slice(0,n))b-=e;for(const e of t.skip.slice(0,s+1))y-=e;for(const e of t.loop.slice(0,n))b+=e;for(const e of t.loop.slice(0,s+1))y+=e;p=n+b,g=s+1+y}else{for(const e of t.skip.slice(s))y-=e;for(const e of t.skip.slice(n+1))b-=e;for(const e of t.loop.slice(s))y+=e;for(const e of t.loop.slice(n+1))b+=e;p=t.len-n-1+b,g=t.len-s+y}let x=function(e,t,n,s,o,i,r,l,c){let d,h=[],u=0,_=new N,f=[],p=o.slice();i.num%2==1&&(d=new N,d.begin=r.begin.slice().reverse(),d.end=r.end.slice().reverse());for(let e=0;e<r.begin.length;e++){let t,n,s,l;if(i.num%2==0?(t=r.begin[e],l=r.end[e],n=r.begin[e],s=r.end[e]):(t=d.end[e],l=d.begin[e],n=i.len-d.begin[e]-1,s=i.len-d.end[e]-1),s-n!=0){h.push(0);for(const n of i.skip.slice(t,l+1))h[e]-=n;for(const n of i.loop.slice(t,l+1))h[e]+=n;f.push(v(...o.slice(n,s))/(s-n+h[e]));for(let t=n;t<s;t++)p[t]=f[e];n+=u,s+=u+h[e],_.add_begin(n),_.add_end(s)}else h.push(0),f.push(v(...o)/o.length),n+=u,s+=u+h[e],_.add_begin(n),_.add_end(s);u+=h[e]}let g=0,b=0,y=0,x=0;for(let e=0;e<r.begin.length;e++){let t,n,s,o;g+=y,b+=x,y=0,x=0,i.num%2==0?(t=r.begin[e],n=r.end[e],s=r.begin[e],o=r.end[e]):(t=d.end[e],n=d.begin[e],s=i.len-d.begin[e]-1,o=i.len-d.end[e]-1);for(const e of i.skip.slice(t,n+1))1===e&&(p.splice(s-g+b,1),y++);for(const o of i.loop.slice(t,n+1))for(let t=0;t<o;t++)p.splice(s-g+b,0,f[e]),x++}let w=(new m).generate_or_sq(p.length+1,void 0,e,t,n,!0,s,p,h,_.begin,_.end);if(l){let e;try{e=c[i.cad_index].map((e=>e))}catch(e){a.die("sequence file contains too few rows compared to the number of virtual helices in the cadnano file, dying")}i.num%2==1&&e.reverse(),w[0].N!=e.length?a.log(`Cannot change sequence: lengths don't match; virtual helix ${i.num}, sequence length ${e.length}, virtual helix length ${w[0].N} - are skips/loops accounted for?`,a.WARNING):w[0].sequence=e;let t=e.map((e=>3-e));t.reverse(),w[0].N!=e.length?a.log(`Cannot change sequence: lengths don't match; virtual helix ${i.num}, sequence length ${e.length}, virtual helix length ${w[0].N} - are skips/loops accounted for?`,a.WARNING):w[1].sequence=t}return w}(r,l,c,d,h,t,o,_,f);return e.add_strand(x[u].get_slice(p,g)),e}function A(e,t,n,s,o,i){let r,l=0,a=0,c=0;if((e.num%2+i)%2==0){for(const t of e.skip.slice(n,s+1))l-=t;for(const t of e.loop.slice(n,s+1))l+=t}else{for(const t of e.skip.slice(s,n+1))l-=t;for(const t of e.loop.slice(s,n+1))l+=t}r=(i+e.num%2)%2==0?s-n+1+l:n+1-s+l;let d=0;for(;d<r;){let s;if(s=(i+e.num%2)%2==0?d+n+a-c:n-d-a+c,1!=e.skip[s]){let n;n=(i+e.num%2)%2==0?M(e.loop[s]+1).map((e=>d+e)):M(e.loop[s]+1).reverse().map((e=>d+e)),0===i?o.set([e.num,s],[t,[d]]):1===i?o.set([t,d],[e.num,[s]]):2===i?o.add_scaf(e.num,s,t,n):3===i&&o.add_stap(e.num,s,t,n),d+=1+e.loop[s],c+=e.loop[s]}else 2===i?o.add_scaf(e.num,s,t,[]):3===i&&o.add_stap(e.num,s,t,[]),a++}return o}function q(e){let t=new N,n=-1;e.num%2==0&&(n=1);for(let s=0;s<e.scaf.length;s++){let o,i,r,l,a=s-1*n,c=s+1*n;M(e.scaf.length).includes(a)?(o=e.scaf[a].type(e,a),i=e.stap[a].type(e,a)):(o=!1,i=!1),M(e.scaf.length).includes(c)?(r=e.scaf[c].type(e,c),l=e.stap[c].type(e,c)):(r=!1,l=!1),(o!==i||"begin"!==o&&"end"!==o)&&(r!==l||"begin"!==r&&"end"!==r)&&("empty"===e.scaf[s].type(e,s)?"begin"===e.stap[s].type(e,s)?t.add_end(s):"end"===e.stap[s].type(e,s)&&t.add_begin(s):"begin"===e.scaf[s].type(e,s)?"empty"===e.stap[s].type(e,s)?t.add_begin(s):"continue"===e.stap[s].type(e,s)?(t.add_begin(s),t.add_end(s-1*n)):"begin"===e.stap[s].type(e,s)?(t.add_begin(s+1*n),t.add_end(s-1*n)):"end"===e.stap[s].type(e,s)&&t.add_begin(s):"end"===e.scaf[s].type(e,s)?"empty"===e.stap[s].type(e,s)?t.add_end(s):"continue"===e.stap[s].type(e,s)?(t.add_begin(s+1*n),t.add_end(s)):"begin"===e.stap[s].type(e,s)?t.add_end(s):"end"===e.stap[s].type(e,s)&&(t.add_begin(s+1*n),t.add_end(s-1*n)):"continue"===e.scaf[s].type(e,s)&&("begin"===e.stap[s].type(e,s)?(t.add_begin(s+1*n),t.add_end(s)):"end"===e.stap[s].type(e,s)&&(t.add_begin(s),t.add_end(s-1*n))))}return t}function V(t,n,s){let o=new m,i=new Array(s.len-1);for(let e=0;e<i.length;e++){let t=e%32;t<2?i[e]=28*Math.PI/180:2===t?i[e]=36*Math.PI/180:3===t?i[e]=54.375*Math.PI/180:4===t?i[e]=37*Math.PI/180:[5,6].includes(t)?i[e]=27.6666666666666*Math.PI/180:7===t?i[e]=30.6666666666666*Math.PI/180:[8,9].includes(t)?i[e]=29.3333333333*Math.PI/180:10===t?i[e]=34.3333333333*Math.PI/180:11===t?i[e]=54.5*Math.PI/180:[12,13].includes(t)?i[e]=28.91666666666*Math.PI/180:[14,15,16,17].includes(t)?i[e]=31.16666666666*Math.PI/180:18===t?i[e]=35.5*Math.PI/180:19===t?i[e]=52*Math.PI/180:20===t?i[e]=35.5*Math.PI/180:[21,22].includes(t)?i[e]=27.5*Math.PI/180:i[e]=23===t?35.5*Math.PI/180:t>=24&&t<27?30*Math.PI/180:27===t?52*Math.PI/180:28===t?35.5*Math.PI/180:Math.PI/180*30.91666666666}let r,a,c,d,h,u=0;for(let e=0;e<31;e++)u+=i[e];for(let e=0;e<i.length;e++)e%32==31&&(i[e]=1080*Math.PI/180-u);return s.num%2==0?(r=new e.Vector3(s.col*w,s.row*w,0),a=t.clone(),c=n.clone(),d=0,h=i.slice()):(r=new e.Vector3(s.col*w,s.row*w,(s.len-1)*l),a=t.clone().negate(),c=n.clone().negate(),d=-v(...i)%(2*Math.PI),h=i.slice().reverse()),[o.generate_or_sq(s.len,void 0,r,a,c,!0,d,h),i,r,d,a,c]}function k(t,n,s){let o=new m,i=new Array(s.len-1);for(let e=0;e<i.length;e++){const t=e%21;0===t?i[e]=32.571*Math.PI/180:1===t?i[e]=36*Math.PI/180:[1,2,3].includes(t)?i[e]=42*Math.PI/180:[5,6,7].includes(t)?i[e]=29.143*Math.PI/180:8===t?i[e]=32*Math.PI/180:[9,10].includes(t)?i[e]=44*Math.PI/180:[12,13,14].includes(t)?i[e]=28.571*Math.PI/180:[16,17].includes(t)?i[e]=41.5*Math.PI/180:[19,20].includes(t)?i[e]=28.476*Math.PI/180:i[e]=720/21*(Math.PI/180)}let r,a,c,d,h,u=0;for(let e=0;e<20;e++)u+=i[e];for(let e=0;e<i.length;e++)e%21==20&&(i[e]=720*Math.PI/180-u);if(s.num%2==0)r=new e.Vector3(s.col*Math.sqrt(3)*x/2,3*s.row*x/2,0),a=t.clone(),c=n.clone(),d=0,h=o.generate_or_sq(s.len,void 0,r,a,c,!0,d,i);else{r=new e.Vector3(s.col*Math.sqrt(3)*x/2,3*s.row*x/2+1.275,(s.len-1)*l),a=t.clone().negate(),c=n.clone().negate(),d=-v(...i)%(2*Math.PI);let u=i.slice().reverse();h=o.generate_or_sq(s.len,void 0,r,a,c,!0,d,u)}return[h,i,r,d,a,c]}class ${constructor(){this.vhelices=[]}add_vhelix(e){this.vhelices.push(e)}bbox(){let e=[],t=[],n=[];for(const s of this.vhelices)e.push(s.row),t.push(s.col),n.push(s.stap.length);const s=w*(Math.max(...e)-Math.min(...e)+2),o=w*(Math.max(...t)-Math.min(...t)+2),i=.34*(Math.max(...n)+2);return 2*Math.max(s,o,i)*2}toString(){let e='{\n"vstrands":[\n';if(this.vhelices.length>0){for(const t of this.vhelices)e+=`${t},`;e=e.slice(0,e.length-1)}return e+="}\n",e}}class S{constructor(){this.stapLoop=[],this.scafLoop=[],this.skip=[],this.loop=[],this.stap_colors=[],this.row=0,this.col=0,this.num=0,this.stap=[],this.scaf=[],this.cad_index=-1,this.skiploop_bases=0}get len(){return Math.max(this.scaf.length,this.stap.length)}add_square(e,t){"stap"===t?this.stap.push(e):"scaf"===t?this.scaf.push(e):a.log("Cannot add square that is not scaf or stap. Dying now",a.CRITICAL)}toString(){let e="{\n";if(e+='"stapLoop":[',this.stapLoop.length>0){for(const t of this.stapLoop)e+=`${t},`;e=e.slice(0,e.length-1)}if(e+="],\n",e+='"skip":[',this.skip.length>0){for(const t of this.skip)e+=`${t},`;e=e.slice(0,e.length-1)}if(e+="],\n",e+='"loop":[',this.loop.length>0){for(const t of this.loop)e+=`${t},`;e=e.slice(0,e.length-1)}if(e+="],\n",e+='"stap_colors":[',this.stap_colors.length>0){for(const t of this.stap_colors)e+=`${t},`;e=e.slice(0,e.length-1)}if(e+="],\n",e+=`"row":${this.row},\n`,e+=`"col":${this.col},\n`,e+=`"num":${this.num},\n`,e+='"scafLoop":[',this.scafLoop.length>0){for(const t of this.scafLoop)e+=`${t},`;e=e.slice(0,e.length-1)}if(e+="],\n",e+='"stap":[',this.stap.length>0){for(const t of this.stap)e+=`${t},`;e=e.slice(0,e.length-1)}if(e+="],\n",e+='"scaf":[',this.scaf.length>0){for(const t of this.scaf)e+=`${t},`;e=e.slice(0,e.length-1)}return e+="]\n}",e}}class P{constructor(e=-1,t=-1,n=-1,s=-1){this.V_0=e,this.b_0=t,this.V_1=n,this.b_1=s}toString(){return`[${this.V_0},${this.b_0},${this.V_1},${this.b_1}]`}type(e,t){if(-1===this.V_0&&-1===this.b_0){if(-1===this.V_1&&-1===this.b_1)return"empty";if(this.V_1===e.num&&1===Math.abs(this.b_1-t))return"begin"}else{if(this.V_0===e.num&&1===Math.abs(this.b_0-t))return-1===this.V_1?"end":this.V_1===e.num&&1===Math.abs(this.b_1-t)?"continue":"end";if(this.V_1===e.num&&1===Math.abs(this.b_1-t))return"begin"}a.log("unexpected square array",a.WARNING)}}function R(t,n,s,o){let i;switch(n){case"cadnano":i=function(t,n,s,o){let i=!1,r=!1;if("sq"===n)i=!0;else{if("he"!==n)return void alert("Lattice_type should be either 'sq' or 'he'");r=!0}let l=new y,f=new y,p=function(e){let t=new $,n=JSON.parse(e);for(const e of n.vstrands){let n=new S;for(const[t,s]of Object.entries(e))"skip"===t?n.skip=s.map((e=>Math.abs(e))):n[t]="stap"===t||"scaf"===t?s.map((e=>new P(...e))):s;n.skiploop_bases=n.skip.length+v(...n.loop)-v(...n.skip),t.add_vhelix(n)}return t}(t),g=!1,m=!0;if(!s){a.log("No sequences given, using random sequence",a.INFO),s=[];for(let e=0;e<p.vhelices.length;e++){let t=[];for(let n=0;n<p.vhelices[e].skiploop_bases;n++)t.push(u(0,4));s.push(t)}}1===s.length&&p.vhelices.length>1&&(a.log("One line detected in the sequence file. Since the cadnano file contains more than 1 virtual helix, the sequence found will be used as we were dealing with a single-strand system",a.INFO),g=!0,m=!1);let x=0;void 0===o&&(o=p.bbox(),a.log("Using default box size, a factor 2 larger than the size of the cadnano system",a.INFO));let w=new e.Vector3(0,0,1),N=new e.Vector3(1,0,0);var R;i?(R=w,N=N.clone().applyAxisAngle(R,15*Math.PI/180)):r&&(N=function(e,t){return t.clone().applyAxisAngle(e,160*Math.PI/180)}(w,N));let z=new h(new e.Vector3(o,o,o)),G=new h(new e.Vector3(o,o,o)),W=-1,C=[],L=[],O=!1,E=[],T=[],j=-1,F=-1;for(const e of p.vhelices){let t,n,o,c,d,h;e.cad_index=x,i?[t,n,o,c,d,h]=V(w,N,e):r&&([t,n,o,c,d,h]=k(w,N,e));let u=q(e),f=0;for(const t of e.scaf){if(-1===t.V_0&&-1===t.b_0)-1===t.V_1&&-1===t.b_0||(t.V_1===e.num&&1===Math.abs(t.b_1-f)?(e.num%2==0&&W++,j=f,e.num%2==1&&(z=I(z,e,j,F,u,0,o,d,h,c,n,0,m,s),l=A(e,W,j,F,l,2))):a.log("unexpected square array",a.WARNING));else if(t.V_0===e.num&&1===Math.abs(t.b_0-f))if(-1===t.V_1&&-1===t.b_1)e.num%2==1&&W++,F=f,e.num%2==0&&(z=I(z,e,j,F,u,0,o,d,h,c,n,0,m,s),l=A(e,W,j,F,l,2));else if(t.V_1===e.num&&1===Math.abs(t.b_1-f));else{let i;e.num%2==1&&W++,F=f,e.num%2==0&&(z=I(z,e,j,F,u,0,o,d,h,c,n,0,m,s),l=A(e,W,j,F,l,2)),e.num,i=f;for(let t=0;t<C.length;t++)_([e.num,i],C[t])&&(E[t].splice(0,0,W),O=!0);O||(E.push([W]),C.push([t.V_1,t.b_1])),O=!1}else if(-1===t.V_1&&-1===t.b_1)a.log("unexpected square array",a.WARNING);else if(t.V_1===e.num&&1===Math.abs(t.b_1-f)){e.num%2==0&&W++,j=f,e.num%2==1&&(z=I(z,e,j,F,u,0,o,d,h,c,n,0,m,s),l=A(e,W,j,F,l,2));for(let t=0;t<C.length;t++){let n;e.num,n=f,_([e.num,n],C[t])&&(E[t].push(W),O=!0)}O||(E.push([W]),C.push([t.V_0,t.b_0])),O=!1}else a.log("unexpected square array",a.WARNING);f++}if(0!==z.N_strands){f=0;for(const t of e.stap){if(-1===t.V_0&&-1===t.b_0)-1===t.V_1&&-1===t.b_0||(t.V_1===e.num&&1===Math.abs(t.b_1-f)?(e.num%2==1&&W++,j=f,e.num%2==0&&(z=I(z,e,j,F,u,0,o,d,h,c,n,1,m,s),l=A(e,W,j,F,l,3))):a.log("unexpected square array",a.WARNING));else if(t.V_0===e.num&&1===Math.abs(t.b_0-f))if(-1===t.V_1&&-1===t.b_1)e.num%2==0&&W++,F=f,e.num%2==1&&(z=I(z,e,j,F,u,0,o,d,h,c,n,1,m,s),l=A(e,W,j,F,l,3));else if(t.V_1===e.num&&1===Math.abs(t.b_1-f));else{e.num%2==0&&W++,F=f,e.num%2==1&&(z=I(z,e,j,F,u,0,o,d,h,c,n,1,m,s),l=A(e,W,j,F,l,3));let i=f;for(let t=0;t<L.length;t++)_([e.num,i],L[t])&&(T[t].splice(0,0,W),O=!0);O||(T.push([W]),L.push([t.V_1,t.b_1])),O=!1}else if(-1===t.V_1&&-1===t.b_1)a.log("unexpected square array",a.WARNING);else if(t.V_1===e.num&&1===Math.abs(t.b_1-f)){e.num%2==1&&W++,j=f,e.num%2==0&&(z=I(z,e,j,F,u,0,o,d,h,c,n,1,m,s),l=A(e,W,j,F,l,3));for(let t=0;t<L.length;t++){let n=f;_([e.num,n],L[t])&&(T[t].push(W),O=!0)}O||(T.push([W]),L.push([t.V_0,t.b_0])),O=!1}else a.log("unexpected square array",a.WARNING);f++}x++}else a.log(`No scaffold strand found in virtual helix n. ${e.num}: staples-only virtual helices are not supported`,a.WARNING)}let D,U=[E,T],B=[];for(let e=0;e<2;e++)for(const t of U[e])B.push(...t);for(let e=0;e<z._strands.length;e++)B.includes(e)||(G.add_strand(z._strands[e]),f.add_strand(e,l));for(let e=0;e<2;e++){const t=U[e];let n=!1;D=!1;for(const e of t){let t=z._strands[e[0]],n=z._strands[e[1]],s=t._nucleotides.slice(-1)[0].distance(n._nucleotides[0],!1),o=Math.sqrt(s.dot(s));(o>1.0018||o<.5525)&&a.log(`The backbone-backbone distance across joints is ${o}: it will have to be relaxed with preliminary simulations`,a.WARNING)}let o=[];for(;!n;){D=!1;for(let e=0;e<t.length&&!D;e++)for(let n=0;n<t.length&&!D;n++)if(t[e][0]===t[n].slice(-1)[0]){if(e!=n){t[n].push(...t[e].slice(1)),t.splice(e,1),D=!0;break}o.includes(e)||o.push(e)}D||(n=!0)}for(let e=0;e<t.length;e++){const n=t[e];let i,r=z._strands[n[0]];if(o.includes(e)){for(const e of M(1,n.length-1))r=r.append(z._strands[n[e]]);r.make_circular(!0)}else for(const e of M(1,n.length))r=r.append(z._strands[n[e]]);G.add_strand(r),i=r._circular?M(n.length-2):M(n.length-1);for(const e of i)f.add_strand(n[e],l,!0);f.add_strand(n[i[i.length-1]+1],l,!1),g&&(G._strands[0].sequence=s[0])}}let Q=new h(G._box);for(const e of G._strands){let t=e._nucleotides.map((e=>e));t.reverse();let n=new d;for(const e of t)n.add_nucleotide(new c(e.cm_pos,e._a1,e._a3.clone().negate(),e._base));e._circular&&n.make_circular(),Q.add_strand(n)}let H=new y,J=M(Q._N_strands),K=0;for(let e=0;e<Q._strands.length;e++){const t=Q._strands[e];J[e]=K,K+=t._nucleotides.length}let X=new Map;for(const[e,t]of f._scaf.keys()){let[n,s]=f._scaf.get([e,t]),o=[];for(const i of s){const s=Q._strands[n]._nucleotides.length-1-(i-J[n])+J[n];o.push(s),X.set(s,[e,t])}H.add_scaf(e,t,n,o)}for(const[e,t]of f._stap.keys()){let[n,s]=f._stap.get([e,t]),o=[];for(const i of s){const s=Q._strands[n]._nucleotides.length-1-(i-J[n])+J[n];o.push(s),X.set(s,[e,t])}H.add_stap(e,t,n,o)}if(0===Q.N)return void a.log("The generated configuration is empty: this might be due to this conversion module not supporting virtual helices containing no scaffold strands.",a.CRITICAL);let Y=new b;for(const e of p.vhelices)for(const[t,n]of e.stap_colors)Y.set([e.num,t],n);let Z=new b;for(const[e,t]of X.entries())Z.has(t)||Z.set(t,[]),Z.get(t).push(e);let ee=new Map;for(const e of Q._strands)for(const t of e._nucleotides)ee.set(t.index,t);let te=[];for(const e of Z.values())for(const t of e)try{te.push(ee.get(t).strand)}catch(e){console.log(`Could not find nucId ${t} strand`)}let ne=(se=te,oe={},se.forEach((function(e){oe[e]=(oe[e]||0)+1})),Object.keys(oe).reduce((function(e,t,n){return!n||oe[t]>oe[e[0]]?[t]:(oe[t]===oe[e[0]]&&e.push(t),e)}),[]))[0];var se,oe;let ie=new Map;for(const e of Q._strands)for(const t of e._nucleotides)if(X.has(t.index)){let[e,n]=X.get(t.index),s=Z.get([e,n]);s.length>1&&(t.pair=ee.get(s.filter((e=>e!=t.index))[0]));let o=Z.get([e,n]).filter((e=>ee.get(e).strand!=ne));if(o.length>0){let s=ee.get(o[0]);const i=[e,s.strand];ie.has(i)||ie.set(i,ie.size+1),t.cluster=ie.get(i),t===s?Y.has([e,n])&&(t.color=Y.get([e,n])):t.color=3633362}else t.cluster=-1}for(const e of Q._strands)for(const t of e._nucleotides)if(void 0!==t.color){for(const n of e._nucleotides)n.color=t.color;break}return Q}([...t.values()],o.grid,o.sequences,o.side);break;default:return void console.log("Unknown input format: "+n)}switch(s){case"oxview":return i.print_oxview_output();case"oxdna":return i.print_lorenzo_output();default:console.log("Unknown output format: "+n)}}async function z(e,t,n,s){const o=new Worker("./js/conversionWorker",{type:"module"});return new Promise(((i,r)=>{try{o.onmessage=e=>{i(e.data),o.terminate()},o.onerror=e=>{r(e),o.terminate()},o.postMessage([e,t,n,s])}catch(e){r(e)}}))}})(),o})()}));